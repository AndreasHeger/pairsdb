// This file has been generated by Py++.

#include "boost/python.hpp"
#include "includes.h"
#include "iostream"
#include "cstdio"
#include "pairsdblib_free_functions.pypp.hpp"

namespace bp = boost::python;

void register_free_functions(){

    { //::pairsdblib::SQL_GetLengthMap
    
        typedef ::pairsdblib::HMapNid2Length ( *SQL_GetLengthMap_function_type )( ::pairsdblib::Connection & );
        
        bp::def( 
            "SQL_GetLengthMap"
            , SQL_GetLengthMap_function_type( &::pairsdblib::SQL_GetLengthMap )
            , ( bp::arg("connection") ) );
    
    }

    { //::pairsdblib::SQL_GetNeighbourLinks
    
        typedef ::pairsdblib::HNeighborLinkVector ( *SQL_GetNeighbourLinks_function_type )( ::pairsdblib::Connection &,::pairsdblib::Nid const &,::std::string const & );
        
        bp::def( 
            "SQL_GetNeighbourLinks"
            , SQL_GetNeighbourLinks_function_type( &::pairsdblib::SQL_GetNeighbourLinks )
            , ( bp::arg("connection"), bp::arg("nid"), bp::arg("table_name")="pairsdb_90x90" ) );
    
    }

    { //::pairsdblib::SQL_GetNeighbours
    
        typedef void ( *SQL_GetNeighbours_function_type )( ::pairsdblib::Connection &,::std::vector< long int > &,::pairsdblib::Nid,char const * );
        
        bp::def( 
            "SQL_GetNeighbours"
            , SQL_GetNeighbours_function_type( &::pairsdblib::SQL_GetNeighbours )
            , ( bp::arg("connection"), bp::arg("result"), bp::arg("nid"), bp::arg("table_name")="pairsdb_90x90" ) );
    
    }

    { //::pairsdblib::SQL_GetNids
    
        typedef ::pairsdblib::HNidVector ( *SQL_GetNids_function_type )( ::pairsdblib::Connection &,::std::string const & );
        
        bp::def( 
            "SQL_GetNids"
            , SQL_GetNids_function_type( &::pairsdblib::SQL_GetNids )
            , ( bp::arg("connection"), bp::arg("table_name")="nrdb90" ) );
    
    }

    { //::pairsdblib::SQL_GetRepresentative
    
        typedef ::pairsdblib::Nid ( *SQL_GetRepresentative_function_type )( ::pairsdblib::Connection &,::pairsdblib::Nid,::pairsdblib::Filter,::pairsdblib::Filter );
        
        bp::def( 
            "SQL_GetRepresentative"
            , SQL_GetRepresentative_function_type( &::pairsdblib::SQL_GetRepresentative )
            , ( bp::arg("connection"), bp::arg("nid"), bp::arg("from_level"), bp::arg("to_level") ) );
    
    }

    { //::pairsdblib::SQL_GetSequenceDomainBoundaries
    
        typedef void ( *SQL_GetSequenceDomainBoundaries_function_type )( ::pairsdblib::Connection &,::std::vector< std::pair<int, int> > &,::pairsdblib::Nid const,char const * );
        
        bp::def( 
            "SQL_GetSequenceDomainBoundaries"
            , SQL_GetSequenceDomainBoundaries_function_type( &::pairsdblib::SQL_GetSequenceDomainBoundaries )
            , ( bp::arg("connection"), bp::arg("dest"), bp::arg("nid"), bp::arg("table_name")="domain_alignments" ) );
    
    }

    { //::pairsdblib::SQL_GetSequenceLength
    
        typedef ::alignlib::Position ( *SQL_GetSequenceLength_function_type )( ::pairsdblib::Connection &,::pairsdblib::Nid const,char const * );
        
        bp::def( 
            "SQL_GetSequenceLength"
            , SQL_GetSequenceLength_function_type( &::pairsdblib::SQL_GetSequenceLength )
            , ( bp::arg("connection"), bp::arg("nid"), bp::arg("table_name")="nrdb" ) );
    
    }

    { //::pairsdblib::SQL_GetSequenceMaskBoundaries
    
        typedef void ( *SQL_GetSequenceMaskBoundaries_function_type )( ::pairsdblib::Connection &,::std::vector< std::pair<int, int> > &,::pairsdblib::Nid const,::pairsdblib::Method const,char const * );
        
        bp::def( 
            "SQL_GetSequenceMaskBoundaries"
            , SQL_GetSequenceMaskBoundaries_function_type( &::pairsdblib::SQL_GetSequenceMaskBoundaries )
            , ( bp::arg("connection"), bp::arg("dest"), bp::arg("nid"), bp::arg("method"), bp::arg("table_name")="nrdb90_masks" ) );
    
    }

    { //::pairsdblib::fillAlignment100x
    
        typedef void ( *fillAlignment100x_function_type )( ::alignlib::HAlignment &,::pairsdblib::Connection &,::pairsdblib::Nid,::pairsdblib::Filter );
        
        bp::def( 
            "fillAlignment100x"
            , fillAlignment100x_function_type( &::pairsdblib::fillAlignment100x )
            , ( bp::arg("dest"), bp::arg("connection"), bp::arg("nid"), bp::arg("level") ) );
    
    }

    { //::pairsdblib::fillAlignmentGroupie
    
        typedef void ( *fillAlignmentGroupie_function_type )( ::alignlib::HAlignment &,::pairsdblib::Connection &,::pairsdblib::Nid,::pairsdblib::Nid,char const * );
        
        bp::def( 
            "fillAlignmentGroupie"
            , fillAlignmentGroupie_function_type( &::pairsdblib::fillAlignmentGroupie )
            , ( bp::arg("dest"), bp::arg("connection"), bp::arg("rep_nid"), bp::arg("mem_nid"), bp::arg("table_name") ) );
    
    }

    { //::pairsdblib::fillProfileDomains
    
        typedef void ( *fillProfileDomains_function_type )( ::alignlib::HAlignandum &,::pairsdblib::Connection &,::pairsdblib::Did,char const *,char const *,unsigned int,unsigned int );
        
        bp::def( 
            "fillProfileDomains"
            , fillProfileDomains_function_type( &::pairsdblib::fillProfileDomains )
            , ( bp::arg("dest"), bp::arg("connection"), bp::arg("did"), bp::arg("table_name_alis"), bp::arg("table_name_info"), bp::arg("max_lines")=(unsigned int)(0), bp::arg("offset_lines")=(unsigned int)(0) ) );
    
    }

    { //::pairsdblib::fillProfileNeighbours
    
        typedef void ( *fillProfileNeighbours_function_type )( ::alignlib::HAlignandum &,::pairsdblib::Connection &,::pairsdblib::Nid,char const *,unsigned int,unsigned int,::pairsdblib::Filter,::pairsdblib::Filter,::pairsdblib::EValue );
        
        bp::def( 
            "fillProfileNeighbours"
            , fillProfileNeighbours_function_type( &::pairsdblib::fillProfileNeighbours )
            , ( bp::arg("dest"), bp::arg("connection"), bp::arg("nid"), bp::arg("table_name"), bp::arg("max_lines")=(unsigned int)(0), bp::arg("offset_lines")=(unsigned int)(0), bp::arg("filter_upper_range")=(int)(100), bp::arg("filter_lower_range")=(int)(0), bp::arg("max_evalue")=1.0e+1 ) );
    
    }

    { //::pairsdblib::makeAlignatumDomain
    
        typedef ::alignlib::HAlignatum ( *makeAlignatumDomain_function_type )( ::pairsdblib::Sequence,::pairsdblib::Identifier,::pairsdblib::Description,::pairsdblib::Nid,::pairsdblib::Score,::pairsdblib::ZScore );
        
        bp::def( 
            "makeAlignatumDomain"
            , makeAlignatumDomain_function_type( &::pairsdblib::makeAlignatumDomain )
            , ( bp::arg("sequence"), bp::arg("identifier"), bp::arg("description"), bp::arg("nid")=(long int)(0), bp::arg("score")=0.0, bp::arg("zscore")=0.0 ) );
    
    }

    { //::pairsdblib::makeAlignatumGroupie
    
        typedef ::alignlib::HAlignatum ( *makeAlignatumGroupie_function_type )( ::pairsdblib::Sequence,::pairsdblib::Identifier,::pairsdblib::Description,::pairsdblib::Nid,::pairsdblib::Pid,::pairsdblib::Score );
        
        bp::def( 
            "makeAlignatumGroupie"
            , makeAlignatumGroupie_function_type( &::pairsdblib::makeAlignatumGroupie )
            , ( bp::arg("sequence"), bp::arg("identifier"), bp::arg("description"), bp::arg("nid")=(long int)(0), bp::arg("pide")=1.0e+0, bp::arg("score")=0.0 ) );
    
    }

    { //::pairsdblib::makeAlignatumNeighbour
    
        typedef ::alignlib::HAlignatum ( *makeAlignatumNeighbour_function_type )( ::pairsdblib::Sequence,::pairsdblib::Identifier,::pairsdblib::Description,::pairsdblib::Nid,::pairsdblib::Pid,::pairsdblib::Score,::pairsdblib::EValue,::pairsdblib::Filter );
        
        bp::def( 
            "makeAlignatumNeighbour"
            , makeAlignatumNeighbour_function_type( &::pairsdblib::makeAlignatumNeighbour )
            , ( bp::arg("sequence"), bp::arg("identifier"), bp::arg("description"), bp::arg("nid")=(long int)(0), bp::arg("pide")=1.0e+0, bp::arg("score")=0.0, bp::arg("evalue")=0.0, bp::arg("filter")=(int)(90) ) );
    
    }

    { //::pairsdblib::makeAlignatumNid
    
        typedef ::alignlib::HAlignatum ( *makeAlignatumNid_function_type )( ::pairsdblib::Sequence,::pairsdblib::Nid );
        
        bp::def( 
            "makeAlignatumNid"
            , makeAlignatumNid_function_type( &::pairsdblib::makeAlignatumNid )
            , ( bp::arg("sequence"), bp::arg("nid")=(long int)(0) ) );
    
    }

    { //::pairsdblib::makeAlignatumRadar
    
        typedef ::alignlib::HAlignatum ( *makeAlignatumRadar_function_type )( ::pairsdblib::Sequence,::pairsdblib::Score,::pairsdblib::ZScore );
        
        bp::def( 
            "makeAlignatumRadar"
            , makeAlignatumRadar_function_type( &::pairsdblib::makeAlignatumRadar )
            , ( bp::arg("sequence"), bp::arg("score")=0.0, bp::arg("zscore")=0.0 ) );
    
    }

    { //::pairsdblib::makeMultipleAlignmentDomains
    
        typedef ::alignlib::HMultipleAlignment ( *makeMultipleAlignmentDomains_function_type )( ::pairsdblib::Connection &,::pairsdblib::Did,char const *,unsigned int,unsigned int,bool,int );
        
        bp::def( 
            "makeMultipleAlignmentDomains"
            , makeMultipleAlignmentDomains_function_type( &::pairsdblib::makeMultipleAlignmentDomains )
            , ( bp::arg("connection"), bp::arg("did"), bp::arg("table_name"), bp::arg("max_lines")=(unsigned int)(0), bp::arg("offset_lines")=(unsigned int)(0), bp::arg("insert_gaps_representative")=(bool)(false), bp::arg("max_insertion_length")=(int)(10) ) );
    
    }

    { //::pairsdblib::makeMultipleAlignmentGroupies
    
        typedef ::alignlib::HMultipleAlignment ( *makeMultipleAlignmentGroupies_function_type )( ::pairsdblib::Connection &,::pairsdblib::Nid,char const *,unsigned int,unsigned int );
        
        bp::def( 
            "makeMultipleAlignmentGroupies"
            , makeMultipleAlignmentGroupies_function_type( &::pairsdblib::makeMultipleAlignmentGroupies )
            , ( bp::arg("connection"), bp::arg("nid"), bp::arg("table_name"), bp::arg("max_lines")=(unsigned int)(0), bp::arg("offset_lines")=(unsigned int)(0) ) );
    
    }

    { //::pairsdblib::makeMultipleAlignmentNeighbours
    
        typedef ::alignlib::HMultipleAlignment ( *makeMultipleAlignmentNeighbours_function_type )( ::pairsdblib::Connection &,::pairsdblib::Nid,char const *,unsigned int,unsigned int,::pairsdblib::Filter,::pairsdblib::Filter,::pairsdblib::EValue );
        
        bp::def( 
            "makeMultipleAlignmentNeighbours"
            , makeMultipleAlignmentNeighbours_function_type( &::pairsdblib::makeMultipleAlignmentNeighbours )
            , ( bp::arg("connection"), bp::arg("nid"), bp::arg("table_name"), bp::arg("max_lines")=(unsigned int)(0), bp::arg("offset_lines")=(unsigned int)(0), bp::arg("filter_upper_range")=(int)(100), bp::arg("filter_lower_range")=(int)(0), bp::arg("max_evalue")=1.0e+1 ) );
    
    }

    { //::pairsdblib::makeMultipleAlignmentRadar
    
        typedef ::alignlib::HMultipleAlignment ( *makeMultipleAlignmentRadar_function_type )( ::pairsdblib::Connection &,::pairsdblib::Nid,::pairsdblib::RepeatId,char const *,unsigned int,unsigned int );
        
        bp::def( 
            "makeMultipleAlignmentRadar"
            , makeMultipleAlignmentRadar_function_type( &::pairsdblib::makeMultipleAlignmentRadar )
            , ( bp::arg("connection"), bp::arg("nid"), bp::arg("repeat_id"), bp::arg("table_name"), bp::arg("max_lines")=(unsigned int)(0), bp::arg("offset_lines")=(unsigned int)(0) ) );
    
    }

    { //::pairsdblib::makeSequenceFromPairsdb
    
        typedef ::alignlib::HAlignandum ( *makeSequenceFromPairsdb_function_type )( ::pairsdblib::Connection &,::pairsdblib::Nid );
        
        bp::def( 
            "makeSequenceFromPairsdb"
            , makeSequenceFromPairsdb_function_type( &::pairsdblib::makeSequenceFromPairsdb )
            , ( bp::arg("connection"), bp::arg("nid") ) );
    
    }

}
